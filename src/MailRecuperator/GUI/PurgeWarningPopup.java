package MailRecuperator.GUI;

import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;

/**
 * The class {@code PurgeWarningPopup} is an extension of the JDialog that
 * serves as the confirmation of the action and the action itself of the
 * purging of the searched url history.
 */
public class PurgeWarningPopup extends JDialog {
    
    /**
     * The parent mainframe.
     */
    Mainframe papa;
    /**
     * The warning text.
     */
    JLabel warningLabel1;
    JLabel warningLabel2;
    /**
     * The yes button, purges the database.
     */
    JButton yesButton;
    /**
     * The no button, only closes the dialog.
     */
    JButton noButton;
    
    /**
     * The constructor of the class.
     * 
     * @param parent is the parent JFrame, here constrained to be a Mainframe
     * @param modal specifies whether the dialog blocks user input to other 
     * top-level windows when shown.
     */
    public PurgeWarningPopup(Mainframe parent, boolean modal) {
        
        /**
         * First, the constructor calls the JDialog construtor.
         */
        super(parent, "Database Purge", modal);
        
        /**
         * Initializing the parent Mainframe.
         */
        this.papa = parent;
        
        /**
         * Initializing the basic shape and properties of the dialog.
         */
        this.setMinimumSize(new Dimension(250, 150));
        this.setResizable(false);
        this.setAlwaysOnTop(true);
        this.setLocationRelativeTo(null);
        this.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
        
        /**
         * Windows Look and Feel.
         */
        try {
            UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows"
                    + ".WindowsLookAndFeel");
        } catch (ClassNotFoundException 
                | InstantiationException 
                | IllegalAccessException 
                | UnsupportedLookAndFeelException ex) {
            Logger.getLogger(PurgeWarningPopup.class.getName())
                    .log(Level.SEVERE, null, ex);
        }
	
        /**
         * Initializes the warning text.
         */
        this.warningLabel1 = new JLabel("Are you certain you want to");        
        this.warningLabel2 = new JLabel("purge the entire database ?");
        
        /**
         * Inintializing the yes button and adding a listener to it.
         */
        this.yesButton = new JButton("Yes");
        this.yesButton.addActionListener(new YesButtonListener());
        
        /**
         * Inintializing the no button and adding a listener to it.
         */
        this.noButton = new JButton("No");
        this.noButton.addActionListener(new NoButtonListener());
        
        /**
         * Placing all the components in their place.
         */
        this.setLayout(new GridBagLayout());
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.gridwidth = 2;
        gbc.weighty = 0;
        gbc.anchor = GridBagConstraints.BASELINE_LEADING;
        gbc.insets = new Insets(5,15,0,5);
        this.add(this.warningLabel1, gbc);
        gbc.gridy = 1;
        this.add(this.warningLabel2, gbc);
        gbc.gridy = 2;
        gbc.gridwidth = 1;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(20,10,10,5);
        gbc.weightx = 1;
        this.add(this.yesButton, gbc);
        gbc.gridx = 1;
        gbc.insets = new Insets(20,5,10,10);
        this.add(this.noButton, gbc);
        
        /**
         * Setting the dialog to be visible.
         */
        this.setVisible(true);
        
    }
    
    /**
     * This is a basic closing function to use in a listener.
     *
     * @param event an action event generated by the listener
     */
    public void exitPurgePopup(ActionEvent event) {
        
        this.dispose();
        
    }
    
    /**
     * This is the function that calls a purge on the searched url hystory.
     */
    public void purgeHistoric(){
        this.papa.settings.deleteHistoric();
    }
    
    /**
     * Listener for the no button, closes the dialog.
     */
    class NoButtonListener implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent e) {
            exitPurgePopup(e);
        }

    }

    /**
     * Listener for the yes button, closes the dialog and purges the search url
     * history.
     */
    class YesButtonListener implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent e) {
            purgeHistoric();
            exitPurgePopup(e);
        }

    }
    
}
