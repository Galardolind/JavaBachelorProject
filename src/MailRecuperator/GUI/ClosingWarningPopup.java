package MailRecuperator.GUI;

import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JLabel;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;

/**
 * La classe {@code ClosingWarningPopup} is an extension of the JDialog that
 * serves as a warning popup before the closing of the recuperation program.
 */
public class ClosingWarningPopup extends JDialog {

    /**
     * The warning text.
     */
    public JLabel warningLabel1;
    public JLabel warningLabel2;
    /**
     * The ok button (quits the program).
     */
    public JButton okButton;
    /**
     * The cancel button (returns to the program).
     */
    public JButton cancelButton;
    /**
     * The parent Mainframe.
     */
    public Mainframe parent;
    /**
     * The boolean indicating if the program ends or not.
     */
    public boolean quitState;

    /**
     * The class constructor.
     *
     * @param parent the parent JFrame, here constrained to be a Mainframe 
     * @param modal specifies whether the dialog blocks user input to other 
     * top-level windows when shown.
     */
    public ClosingWarningPopup(Mainframe parent, boolean modal) {

        /**
         * First, the constructor calls the JDialog construtor.
         */
        super(parent, "Exiting ...", modal);

        /**
         * Initializing the parent Mainframe.
         */
        this.parent = parent;

        /**
         * Initializing the basic shape and properties of the dialog.
         */
        this.setMinimumSize(new Dimension(250, 150));
        this.setResizable(false);
        this.setAlwaysOnTop(true);
        this.setLocationRelativeTo(null);
        this.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);

        /**
         * Windows Look and Feel.
         */
        try {
            UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows"
                    + ".WindowsLookAndFeel");
        } catch (ClassNotFoundException | InstantiationException | IllegalAccessException | UnsupportedLookAndFeelException ex) {
            Logger.getLogger(ClosingWarningPopup.class.getName())
                    .log(Level.SEVERE, null, ex);
        }

        /**
         * Initializing the warning text.
         */
        this.warningLabel1 = new JLabel("You are about to exit");
        this.warningLabel2 = new JLabel("the eMail Recuperator Software");

        /**
         * Inintializing the ok button and adding a listener to it.
         */
        this.okButton = new JButton("OK");
        this.okButton.addActionListener(new OKButtonListener());

        /**
         * Inintializing the cancel button and adding a listener to it.
         */
        this.cancelButton = new JButton("Cancel");
        this.cancelButton.addActionListener(new CancelButtonListener());

        /**
         * Placing all the components in their place.
         */
        this.setLayout(new GridBagLayout());
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.gridwidth = 2;
        gbc.weighty = 0;
        gbc.anchor = GridBagConstraints.BASELINE_LEADING;
        gbc.insets = new Insets(5, 15, 0, 5);
        this.add(this.warningLabel1, gbc);
        gbc.gridy = 1;
        this.add(this.warningLabel2, gbc);
        gbc.gridy = 2;
        gbc.gridwidth = 1;
        gbc.fill = GridBagConstraints.HORIZONTAL;
        gbc.insets = new Insets(10, 10, 20, 5);
        gbc.weightx = 1;
        this.add(this.okButton, gbc);
        gbc.gridx = 1;
        gbc.insets = new Insets(10, 5, 20, 10);
        this.add(this.cancelButton, gbc);

        /**
         * Setting the dialog to be visible.
         */
        this.setVisible(true);

    }

    /**
     * This is a closing function to use in a listener that also closes the 
     * program after ending all threads started by it.
     * 
     * @param event an action event generated by the listener
     */
    public void acceptWarningPopup(ActionEvent event) {
        this.parent.status.setStop(true);
        this.parent.refresher.setQuit();
        if (this.parent.papa != null) {
            this.parent.papa.setVisible(true);
        }
        this.parent.dispose();

    }

    /**
     * This is a basic closing function to use in a listener.
     *
     * @param event an action event generated by the listener
     */
    public void cancelWarnigPopup(ActionEvent event) {

        this.dispose();

    }

    /**
     * Listener for the ok button, closes the dialog and the parent Mainframe.
     */
    public class OKButtonListener implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent e) {
            acceptWarningPopup(e);
        }
    }

    /**
     * Listener for the cancel button, closes the dialog.
     */
    public class CancelButtonListener implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent e) {
            cancelWarnigPopup(e);
        }
    }
}
