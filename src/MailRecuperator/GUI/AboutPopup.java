package MailRecuperator.GUI;

import java.awt.Dimension;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JButton;
import javax.swing.JDialog;
import javax.swing.JTextArea;
import javax.swing.UIManager;
import javax.swing.UnsupportedLookAndFeelException;

/**
 * The class {@code AboutPopup} is an extension on JDialog which is meant to
 * display miscellaneous informations on the program
 * It is therefore a simple construction composed only of a display area and a
 * closing button.
 */
public class AboutPopup extends JDialog {
    
    /**
     * The Display area.
     */
    public JTextArea aboutText;
    /**
     * The closing button.
     */
    public JButton closeAboutButton;
    
    /**
     * The constructor of the class.
     * 
     * @param parent is the parent JFrame, here constrained to be a Mainframe
     * @param modal specifies whether the dialog blocks user input to other 
     * top-level windows when shown.
     */
    public AboutPopup(Mainframe parent, boolean modal) {
        
        /**
         * First, the constructor calls the JDialog construtor.
         */
        super(parent, "About", modal);
        
        /**
         * Initializing the basic shape and properties of the dialog.
         */
        this.setMinimumSize(new Dimension(400, 300));
        this.setResizable(false);
        this.setAlwaysOnTop(true);
        this.setLocationRelativeTo(null);
        this.setDefaultCloseOperation(JDialog.DISPOSE_ON_CLOSE);
        
        
        /**
         * Windows Look and Feel.
         */        
        try {
            UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows"
                    + ".WindowsLookAndFeel");
        } catch (ClassNotFoundException 
                | InstantiationException 
                | IllegalAccessException 
                | UnsupportedLookAndFeelException ex) {
            Logger.getLogger(ClosingWarningPopup.class.getName())
                    .log(Level.SEVERE, null, ex);
        }
        
        /**
         * Initializing the display area with its content and setting it to be 
         * non editable.
         */
        this.aboutText = new JTextArea("This program is presented to you by :\n"
                + "Lionel Brouchet\n"
                + "Romain Huneau\n"
                + "Florian Germond\n"
                + "Thomas Ballereau\n"
                + "Willy Lellouch\n"
                + "\n"
                + "Please visit the wiki for more info !");
        this.aboutText.setEditable(false);
        
        /**
         * Initializing the closing button and adding a listener to it.
         */
        this.closeAboutButton = new JButton("Close");
        this.closeAboutButton.addActionListener(new CloseAboutButtonListener());
        
        /**
         * Placing all the components in their place.
         */
        this.setLayout(new GridBagLayout());
        GridBagConstraints gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.weightx = 1;
        gbc.weighty = 1;
        gbc.insets = new Insets(5,5,5,5);
        gbc.anchor = GridBagConstraints.CENTER;
        gbc.fill = GridBagConstraints.BOTH;
        this.add(this.aboutText, gbc);
        gbc.gridy = 1;
        gbc.weighty = 0;
        gbc.anchor = GridBagConstraints.EAST;
        gbc.fill = GridBagConstraints.NONE;
        this.add(this.closeAboutButton, gbc);
        
        /**
         * Setting the dialog to be visible.
         */
        this.setVisible(true);
    }
    
    /**
     * This is a basic closing function to use in a listener
     *
     * @param event an action event generated by the listener
     */
    public void closeAbout(ActionEvent event) {
        
        this.dispose();
        
    }
    
    /**
     * Action Listener for the closing button, closes the dialog.
     */
    public class CloseAboutButtonListener implements ActionListener {

        @Override
        public void actionPerformed(ActionEvent e) {
            closeAbout(e);
        }
        
    }
    
}
